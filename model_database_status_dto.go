/*
websocket-gateway

Describe the weboscket endpoints

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"fmt"
)

// checks if the DatabaseStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseStatusDto{}

// DatabaseStatusDto struct for DatabaseStatusDto
type DatabaseStatusDto struct {
	Id string `json:"id"`
	Pods []PodStatusDto `json:"pods"`
	State ServiceStateDto `json:"state"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseStatusDto DatabaseStatusDto

// NewDatabaseStatusDto instantiates a new DatabaseStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseStatusDto(id string, pods []PodStatusDto, state ServiceStateDto) *DatabaseStatusDto {
	this := DatabaseStatusDto{}
	this.Id = id
	this.Pods = pods
	this.State = state
	return &this
}

// NewDatabaseStatusDtoWithDefaults instantiates a new DatabaseStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseStatusDtoWithDefaults() *DatabaseStatusDto {
	this := DatabaseStatusDto{}
	return &this
}

// GetId returns the Id field value
func (o *DatabaseStatusDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DatabaseStatusDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DatabaseStatusDto) SetId(v string) {
	o.Id = v
}

// GetPods returns the Pods field value
func (o *DatabaseStatusDto) GetPods() []PodStatusDto {
	if o == nil {
		var ret []PodStatusDto
		return ret
	}

	return o.Pods
}

// GetPodsOk returns a tuple with the Pods field value
// and a boolean to check if the value has been set.
func (o *DatabaseStatusDto) GetPodsOk() ([]PodStatusDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pods, true
}

// SetPods sets field value
func (o *DatabaseStatusDto) SetPods(v []PodStatusDto) {
	o.Pods = v
}

// GetState returns the State field value
func (o *DatabaseStatusDto) GetState() ServiceStateDto {
	if o == nil {
		var ret ServiceStateDto
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *DatabaseStatusDto) GetStateOk() (*ServiceStateDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *DatabaseStatusDto) SetState(v ServiceStateDto) {
	o.State = v
}

func (o DatabaseStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["pods"] = o.Pods
	toSerialize["state"] = o.State

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseStatusDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"pods",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabaseStatusDto := _DatabaseStatusDto{}

	err = json.Unmarshal(data, &varDatabaseStatusDto)

	if err != nil {
		return err
	}

	*o = DatabaseStatusDto(varDatabaseStatusDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "pods")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseStatusDto struct {
	value *DatabaseStatusDto
	isSet bool
}

func (v NullableDatabaseStatusDto) Get() *DatabaseStatusDto {
	return v.value
}

func (v *NullableDatabaseStatusDto) Set(val *DatabaseStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseStatusDto(val *DatabaseStatusDto) *NullableDatabaseStatusDto {
	return &NullableDatabaseStatusDto{value: val, isSet: true}
}

func (v NullableDatabaseStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


