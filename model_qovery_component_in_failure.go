/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"fmt"
)

// QoveryComponentInFailure - struct for QoveryComponentInFailure
type QoveryComponentInFailure struct {
	QoveryComponentInFailureOneOf *QoveryComponentInFailureOneOf
	QoveryComponentInFailureOneOf1 *QoveryComponentInFailureOneOf1
}

// QoveryComponentInFailureOneOfAsQoveryComponentInFailure is a convenience function that returns QoveryComponentInFailureOneOf wrapped in QoveryComponentInFailure
func QoveryComponentInFailureOneOfAsQoveryComponentInFailure(v *QoveryComponentInFailureOneOf) QoveryComponentInFailure {
	return QoveryComponentInFailure{
		QoveryComponentInFailureOneOf: v,
	}
}

// QoveryComponentInFailureOneOf1AsQoveryComponentInFailure is a convenience function that returns QoveryComponentInFailureOneOf1 wrapped in QoveryComponentInFailure
func QoveryComponentInFailureOneOf1AsQoveryComponentInFailure(v *QoveryComponentInFailureOneOf1) QoveryComponentInFailure {
	return QoveryComponentInFailure{
		QoveryComponentInFailureOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QoveryComponentInFailure) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QoveryComponentInFailureOneOf
	err = newStrictDecoder(data).Decode(&dst.QoveryComponentInFailureOneOf)
	if err == nil {
		jsonQoveryComponentInFailureOneOf, _ := json.Marshal(dst.QoveryComponentInFailureOneOf)
		if string(jsonQoveryComponentInFailureOneOf) == "{}" { // empty struct
			dst.QoveryComponentInFailureOneOf = nil
		} else {
			match++
		}
	} else {
		dst.QoveryComponentInFailureOneOf = nil
	}

	// try to unmarshal data into QoveryComponentInFailureOneOf1
	err = newStrictDecoder(data).Decode(&dst.QoveryComponentInFailureOneOf1)
	if err == nil {
		jsonQoveryComponentInFailureOneOf1, _ := json.Marshal(dst.QoveryComponentInFailureOneOf1)
		if string(jsonQoveryComponentInFailureOneOf1) == "{}" { // empty struct
			dst.QoveryComponentInFailureOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.QoveryComponentInFailureOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QoveryComponentInFailureOneOf = nil
		dst.QoveryComponentInFailureOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QoveryComponentInFailure)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QoveryComponentInFailure)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QoveryComponentInFailure) MarshalJSON() ([]byte, error) {
	if src.QoveryComponentInFailureOneOf != nil {
		return json.Marshal(&src.QoveryComponentInFailureOneOf)
	}

	if src.QoveryComponentInFailureOneOf1 != nil {
		return json.Marshal(&src.QoveryComponentInFailureOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QoveryComponentInFailure) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QoveryComponentInFailureOneOf != nil {
		return obj.QoveryComponentInFailureOneOf
	}

	if obj.QoveryComponentInFailureOneOf1 != nil {
		return obj.QoveryComponentInFailureOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableQoveryComponentInFailure struct {
	value *QoveryComponentInFailure
	isSet bool
}

func (v NullableQoveryComponentInFailure) Get() *QoveryComponentInFailure {
	return v.value
}

func (v *NullableQoveryComponentInFailure) Set(val *QoveryComponentInFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableQoveryComponentInFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableQoveryComponentInFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQoveryComponentInFailure(val *QoveryComponentInFailure) *NullableQoveryComponentInFailure {
	return &NullableQoveryComponentInFailure{value: val, isSet: true}
}

func (v NullableQoveryComponentInFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQoveryComponentInFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


