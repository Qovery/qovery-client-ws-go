/*
websocket-gateway

Describe the weboscket endpoints

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeConditionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeConditionDto{}

// NodeConditionDto struct for NodeConditionDto
type NodeConditionDto struct {
	LastHeartbeatTime int64 `json:"last_heartbeat_time"`
	LastTransitionTime int64 `json:"last_transition_time"`
	Message string `json:"message"`
	Reason string `json:"reason"`
	Status string `json:"status"`
	Type string `json:"type"`
}

type _NodeConditionDto NodeConditionDto

// NewNodeConditionDto instantiates a new NodeConditionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeConditionDto(lastHeartbeatTime int64, lastTransitionTime int64, message string, reason string, status string, type_ string) *NodeConditionDto {
	this := NodeConditionDto{}
	this.LastHeartbeatTime = lastHeartbeatTime
	this.LastTransitionTime = lastTransitionTime
	this.Message = message
	this.Reason = reason
	this.Status = status
	this.Type = type_
	return &this
}

// NewNodeConditionDtoWithDefaults instantiates a new NodeConditionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeConditionDtoWithDefaults() *NodeConditionDto {
	this := NodeConditionDto{}
	return &this
}

// GetLastHeartbeatTime returns the LastHeartbeatTime field value
func (o *NodeConditionDto) GetLastHeartbeatTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastHeartbeatTime
}

// GetLastHeartbeatTimeOk returns a tuple with the LastHeartbeatTime field value
// and a boolean to check if the value has been set.
func (o *NodeConditionDto) GetLastHeartbeatTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHeartbeatTime, true
}

// SetLastHeartbeatTime sets field value
func (o *NodeConditionDto) SetLastHeartbeatTime(v int64) {
	o.LastHeartbeatTime = v
}

// GetLastTransitionTime returns the LastTransitionTime field value
func (o *NodeConditionDto) GetLastTransitionTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastTransitionTime
}

// GetLastTransitionTimeOk returns a tuple with the LastTransitionTime field value
// and a boolean to check if the value has been set.
func (o *NodeConditionDto) GetLastTransitionTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastTransitionTime, true
}

// SetLastTransitionTime sets field value
func (o *NodeConditionDto) SetLastTransitionTime(v int64) {
	o.LastTransitionTime = v
}

// GetMessage returns the Message field value
func (o *NodeConditionDto) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *NodeConditionDto) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *NodeConditionDto) SetMessage(v string) {
	o.Message = v
}

// GetReason returns the Reason field value
func (o *NodeConditionDto) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *NodeConditionDto) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *NodeConditionDto) SetReason(v string) {
	o.Reason = v
}

// GetStatus returns the Status field value
func (o *NodeConditionDto) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NodeConditionDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NodeConditionDto) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *NodeConditionDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NodeConditionDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NodeConditionDto) SetType(v string) {
	o.Type = v
}

func (o NodeConditionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeConditionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["last_heartbeat_time"] = o.LastHeartbeatTime
	toSerialize["last_transition_time"] = o.LastTransitionTime
	toSerialize["message"] = o.Message
	toSerialize["reason"] = o.Reason
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *NodeConditionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"last_heartbeat_time",
		"last_transition_time",
		"message",
		"reason",
		"status",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeConditionDto := _NodeConditionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeConditionDto)

	if err != nil {
		return err
	}

	*o = NodeConditionDto(varNodeConditionDto)

	return err
}

type NullableNodeConditionDto struct {
	value *NodeConditionDto
	isSet bool
}

func (v NullableNodeConditionDto) Get() *NodeConditionDto {
	return v.value
}

func (v *NullableNodeConditionDto) Set(val *NodeConditionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeConditionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeConditionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeConditionDto(val *NodeConditionDto) *NullableNodeConditionDto {
	return &NullableNodeConditionDto{value: val, isSet: true}
}

func (v NullableNodeConditionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeConditionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


