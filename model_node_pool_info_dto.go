/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodePoolInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodePoolInfoDto{}

// NodePoolInfoDto struct for NodePoolInfoDto
type NodePoolInfoDto struct {
	CpuMilli int64 `json:"cpu_milli"`
	CpuMilliLimit NullableInt64 `json:"cpu_milli_limit,omitempty"`
	MemoryMib int64 `json:"memory_mib"`
	MemoryMibLimit NullableInt64 `json:"memory_mib_limit,omitempty"`
	Name string `json:"name"`
	NodesCount int32 `json:"nodes_count"`
}

type _NodePoolInfoDto NodePoolInfoDto

// NewNodePoolInfoDto instantiates a new NodePoolInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePoolInfoDto(cpuMilli int64, memoryMib int64, name string, nodesCount int32) *NodePoolInfoDto {
	this := NodePoolInfoDto{}
	this.CpuMilli = cpuMilli
	this.MemoryMib = memoryMib
	this.Name = name
	this.NodesCount = nodesCount
	return &this
}

// NewNodePoolInfoDtoWithDefaults instantiates a new NodePoolInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePoolInfoDtoWithDefaults() *NodePoolInfoDto {
	this := NodePoolInfoDto{}
	return &this
}

// GetCpuMilli returns the CpuMilli field value
func (o *NodePoolInfoDto) GetCpuMilli() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CpuMilli
}

// GetCpuMilliOk returns a tuple with the CpuMilli field value
// and a boolean to check if the value has been set.
func (o *NodePoolInfoDto) GetCpuMilliOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CpuMilli, true
}

// SetCpuMilli sets field value
func (o *NodePoolInfoDto) SetCpuMilli(v int64) {
	o.CpuMilli = v
}

// GetCpuMilliLimit returns the CpuMilliLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodePoolInfoDto) GetCpuMilliLimit() int64 {
	if o == nil || IsNil(o.CpuMilliLimit.Get()) {
		var ret int64
		return ret
	}
	return *o.CpuMilliLimit.Get()
}

// GetCpuMilliLimitOk returns a tuple with the CpuMilliLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePoolInfoDto) GetCpuMilliLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CpuMilliLimit.Get(), o.CpuMilliLimit.IsSet()
}

// HasCpuMilliLimit returns a boolean if a field has been set.
func (o *NodePoolInfoDto) HasCpuMilliLimit() bool {
	if o != nil && o.CpuMilliLimit.IsSet() {
		return true
	}

	return false
}

// SetCpuMilliLimit gets a reference to the given NullableInt64 and assigns it to the CpuMilliLimit field.
func (o *NodePoolInfoDto) SetCpuMilliLimit(v int64) {
	o.CpuMilliLimit.Set(&v)
}
// SetCpuMilliLimitNil sets the value for CpuMilliLimit to be an explicit nil
func (o *NodePoolInfoDto) SetCpuMilliLimitNil() {
	o.CpuMilliLimit.Set(nil)
}

// UnsetCpuMilliLimit ensures that no value is present for CpuMilliLimit, not even an explicit nil
func (o *NodePoolInfoDto) UnsetCpuMilliLimit() {
	o.CpuMilliLimit.Unset()
}

// GetMemoryMib returns the MemoryMib field value
func (o *NodePoolInfoDto) GetMemoryMib() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MemoryMib
}

// GetMemoryMibOk returns a tuple with the MemoryMib field value
// and a boolean to check if the value has been set.
func (o *NodePoolInfoDto) GetMemoryMibOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryMib, true
}

// SetMemoryMib sets field value
func (o *NodePoolInfoDto) SetMemoryMib(v int64) {
	o.MemoryMib = v
}

// GetMemoryMibLimit returns the MemoryMibLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodePoolInfoDto) GetMemoryMibLimit() int64 {
	if o == nil || IsNil(o.MemoryMibLimit.Get()) {
		var ret int64
		return ret
	}
	return *o.MemoryMibLimit.Get()
}

// GetMemoryMibLimitOk returns a tuple with the MemoryMibLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePoolInfoDto) GetMemoryMibLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemoryMibLimit.Get(), o.MemoryMibLimit.IsSet()
}

// HasMemoryMibLimit returns a boolean if a field has been set.
func (o *NodePoolInfoDto) HasMemoryMibLimit() bool {
	if o != nil && o.MemoryMibLimit.IsSet() {
		return true
	}

	return false
}

// SetMemoryMibLimit gets a reference to the given NullableInt64 and assigns it to the MemoryMibLimit field.
func (o *NodePoolInfoDto) SetMemoryMibLimit(v int64) {
	o.MemoryMibLimit.Set(&v)
}
// SetMemoryMibLimitNil sets the value for MemoryMibLimit to be an explicit nil
func (o *NodePoolInfoDto) SetMemoryMibLimitNil() {
	o.MemoryMibLimit.Set(nil)
}

// UnsetMemoryMibLimit ensures that no value is present for MemoryMibLimit, not even an explicit nil
func (o *NodePoolInfoDto) UnsetMemoryMibLimit() {
	o.MemoryMibLimit.Unset()
}

// GetName returns the Name field value
func (o *NodePoolInfoDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodePoolInfoDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodePoolInfoDto) SetName(v string) {
	o.Name = v
}

// GetNodesCount returns the NodesCount field value
func (o *NodePoolInfoDto) GetNodesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodesCount
}

// GetNodesCountOk returns a tuple with the NodesCount field value
// and a boolean to check if the value has been set.
func (o *NodePoolInfoDto) GetNodesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodesCount, true
}

// SetNodesCount sets field value
func (o *NodePoolInfoDto) SetNodesCount(v int32) {
	o.NodesCount = v
}

func (o NodePoolInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodePoolInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu_milli"] = o.CpuMilli
	if o.CpuMilliLimit.IsSet() {
		toSerialize["cpu_milli_limit"] = o.CpuMilliLimit.Get()
	}
	toSerialize["memory_mib"] = o.MemoryMib
	if o.MemoryMibLimit.IsSet() {
		toSerialize["memory_mib_limit"] = o.MemoryMibLimit.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["nodes_count"] = o.NodesCount
	return toSerialize, nil
}

func (o *NodePoolInfoDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu_milli",
		"memory_mib",
		"name",
		"nodes_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodePoolInfoDto := _NodePoolInfoDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodePoolInfoDto)

	if err != nil {
		return err
	}

	*o = NodePoolInfoDto(varNodePoolInfoDto)

	return err
}

type NullableNodePoolInfoDto struct {
	value *NodePoolInfoDto
	isSet bool
}

func (v NullableNodePoolInfoDto) Get() *NodePoolInfoDto {
	return v.value
}

func (v *NullableNodePoolInfoDto) Set(val *NodePoolInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePoolInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePoolInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePoolInfoDto(val *NodePoolInfoDto) *NullableNodePoolInfoDto {
	return &NullableNodePoolInfoDto{value: val, isSet: true}
}

func (v NullableNodePoolInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePoolInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


