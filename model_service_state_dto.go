/*
websocket-gateway

Describe the weboscket endpoints

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"fmt"
)

// ServiceStateDto the model 'ServiceStateDto'
type ServiceStateDto string

// List of ServiceStateDto
const (
	SERVICESTATEDTO_STARTING ServiceStateDto = "STARTING"
	SERVICESTATEDTO_RUNNING ServiceStateDto = "RUNNING"
	SERVICESTATEDTO_ERROR ServiceStateDto = "ERROR"
	SERVICESTATEDTO_STOPPING ServiceStateDto = "STOPPING"
	SERVICESTATEDTO_STOPPED ServiceStateDto = "STOPPED"
	SERVICESTATEDTO_COMPLETED ServiceStateDto = "COMPLETED"
	SERVICESTATEDTO_WARNING ServiceStateDto = "WARNING"
)

// All allowed values of ServiceStateDto enum
var AllowedServiceStateDtoEnumValues = []ServiceStateDto{
	"STARTING",
	"RUNNING",
	"ERROR",
	"STOPPING",
	"STOPPED",
	"COMPLETED",
	"WARNING",
}

func (v *ServiceStateDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceStateDto(value)
	for _, existing := range AllowedServiceStateDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStateDto", value)
}

// NewServiceStateDtoFromValue returns a pointer to a valid ServiceStateDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStateDtoFromValue(v string) (*ServiceStateDto, error) {
	ev := ServiceStateDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStateDto: valid values are %v", v, AllowedServiceStateDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStateDto) IsValid() bool {
	for _, existing := range AllowedServiceStateDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceStateDto value
func (v ServiceStateDto) Ptr() *ServiceStateDto {
	return &v
}

type NullableServiceStateDto struct {
	value *ServiceStateDto
	isSet bool
}

func (v NullableServiceStateDto) Get() *ServiceStateDto {
	return v.value
}

func (v *NullableServiceStateDto) Set(val *ServiceStateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStateDto(val *ServiceStateDto) *NullableServiceStateDto {
	return &NullableServiceStateDto{value: val, isSet: true}
}

func (v NullableServiceStateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

