/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterMetricsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterMetricsDto{}

// ClusterMetricsDto struct for ClusterMetricsDto
type ClusterMetricsDto struct {
	NodePools []NodePoolInfoDto `json:"node_pools"`
	Nodes []ClusterNodeDto `json:"nodes"`
	Pvcs []PvcInfoDto `json:"pvcs"`
}

type _ClusterMetricsDto ClusterMetricsDto

// NewClusterMetricsDto instantiates a new ClusterMetricsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterMetricsDto(nodePools []NodePoolInfoDto, nodes []ClusterNodeDto, pvcs []PvcInfoDto) *ClusterMetricsDto {
	this := ClusterMetricsDto{}
	this.NodePools = nodePools
	this.Nodes = nodes
	this.Pvcs = pvcs
	return &this
}

// NewClusterMetricsDtoWithDefaults instantiates a new ClusterMetricsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterMetricsDtoWithDefaults() *ClusterMetricsDto {
	this := ClusterMetricsDto{}
	return &this
}

// GetNodePools returns the NodePools field value
func (o *ClusterMetricsDto) GetNodePools() []NodePoolInfoDto {
	if o == nil {
		var ret []NodePoolInfoDto
		return ret
	}

	return o.NodePools
}

// GetNodePoolsOk returns a tuple with the NodePools field value
// and a boolean to check if the value has been set.
func (o *ClusterMetricsDto) GetNodePoolsOk() ([]NodePoolInfoDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodePools, true
}

// SetNodePools sets field value
func (o *ClusterMetricsDto) SetNodePools(v []NodePoolInfoDto) {
	o.NodePools = v
}

// GetNodes returns the Nodes field value
func (o *ClusterMetricsDto) GetNodes() []ClusterNodeDto {
	if o == nil {
		var ret []ClusterNodeDto
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
func (o *ClusterMetricsDto) GetNodesOk() ([]ClusterNodeDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nodes, true
}

// SetNodes sets field value
func (o *ClusterMetricsDto) SetNodes(v []ClusterNodeDto) {
	o.Nodes = v
}

// GetPvcs returns the Pvcs field value
func (o *ClusterMetricsDto) GetPvcs() []PvcInfoDto {
	if o == nil {
		var ret []PvcInfoDto
		return ret
	}

	return o.Pvcs
}

// GetPvcsOk returns a tuple with the Pvcs field value
// and a boolean to check if the value has been set.
func (o *ClusterMetricsDto) GetPvcsOk() ([]PvcInfoDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pvcs, true
}

// SetPvcs sets field value
func (o *ClusterMetricsDto) SetPvcs(v []PvcInfoDto) {
	o.Pvcs = v
}

func (o ClusterMetricsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterMetricsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node_pools"] = o.NodePools
	toSerialize["nodes"] = o.Nodes
	toSerialize["pvcs"] = o.Pvcs
	return toSerialize, nil
}

func (o *ClusterMetricsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node_pools",
		"nodes",
		"pvcs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterMetricsDto := _ClusterMetricsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterMetricsDto)

	if err != nil {
		return err
	}

	*o = ClusterMetricsDto(varClusterMetricsDto)

	return err
}

type NullableClusterMetricsDto struct {
	value *ClusterMetricsDto
	isSet bool
}

func (v NullableClusterMetricsDto) Get() *ClusterMetricsDto {
	return v.value
}

func (v *NullableClusterMetricsDto) Set(val *ClusterMetricsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterMetricsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterMetricsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterMetricsDto(val *ClusterMetricsDto) *NullableClusterMetricsDto {
	return &NullableClusterMetricsDto{value: val, isSet: true}
}

func (v NullableClusterMetricsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterMetricsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


