/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnvironmentStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentStatusDto{}

// EnvironmentStatusDto struct for EnvironmentStatusDto
type EnvironmentStatusDto struct {
	Applications []ApplicationStatusDto `json:"applications"`
	Containers []ApplicationStatusDto `json:"containers"`
	Databases []DatabaseStatusDto `json:"databases"`
	Helms []ApplicationStatusDto `json:"helms"`
	Id string `json:"id"`
	Jobs []ApplicationStatusDto `json:"jobs"`
	ProjectId string `json:"project_id"`
	State ServiceStateDto `json:"state"`
}

type _EnvironmentStatusDto EnvironmentStatusDto

// NewEnvironmentStatusDto instantiates a new EnvironmentStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentStatusDto(applications []ApplicationStatusDto, containers []ApplicationStatusDto, databases []DatabaseStatusDto, helms []ApplicationStatusDto, id string, jobs []ApplicationStatusDto, projectId string, state ServiceStateDto) *EnvironmentStatusDto {
	this := EnvironmentStatusDto{}
	this.Applications = applications
	this.Containers = containers
	this.Databases = databases
	this.Helms = helms
	this.Id = id
	this.Jobs = jobs
	this.ProjectId = projectId
	this.State = state
	return &this
}

// NewEnvironmentStatusDtoWithDefaults instantiates a new EnvironmentStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentStatusDtoWithDefaults() *EnvironmentStatusDto {
	this := EnvironmentStatusDto{}
	return &this
}

// GetApplications returns the Applications field value
func (o *EnvironmentStatusDto) GetApplications() []ApplicationStatusDto {
	if o == nil {
		var ret []ApplicationStatusDto
		return ret
	}

	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatusDto) GetApplicationsOk() ([]ApplicationStatusDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Applications, true
}

// SetApplications sets field value
func (o *EnvironmentStatusDto) SetApplications(v []ApplicationStatusDto) {
	o.Applications = v
}

// GetContainers returns the Containers field value
func (o *EnvironmentStatusDto) GetContainers() []ApplicationStatusDto {
	if o == nil {
		var ret []ApplicationStatusDto
		return ret
	}

	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatusDto) GetContainersOk() ([]ApplicationStatusDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Containers, true
}

// SetContainers sets field value
func (o *EnvironmentStatusDto) SetContainers(v []ApplicationStatusDto) {
	o.Containers = v
}

// GetDatabases returns the Databases field value
func (o *EnvironmentStatusDto) GetDatabases() []DatabaseStatusDto {
	if o == nil {
		var ret []DatabaseStatusDto
		return ret
	}

	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatusDto) GetDatabasesOk() ([]DatabaseStatusDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Databases, true
}

// SetDatabases sets field value
func (o *EnvironmentStatusDto) SetDatabases(v []DatabaseStatusDto) {
	o.Databases = v
}

// GetHelms returns the Helms field value
func (o *EnvironmentStatusDto) GetHelms() []ApplicationStatusDto {
	if o == nil {
		var ret []ApplicationStatusDto
		return ret
	}

	return o.Helms
}

// GetHelmsOk returns a tuple with the Helms field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatusDto) GetHelmsOk() ([]ApplicationStatusDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Helms, true
}

// SetHelms sets field value
func (o *EnvironmentStatusDto) SetHelms(v []ApplicationStatusDto) {
	o.Helms = v
}

// GetId returns the Id field value
func (o *EnvironmentStatusDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatusDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvironmentStatusDto) SetId(v string) {
	o.Id = v
}

// GetJobs returns the Jobs field value
func (o *EnvironmentStatusDto) GetJobs() []ApplicationStatusDto {
	if o == nil {
		var ret []ApplicationStatusDto
		return ret
	}

	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatusDto) GetJobsOk() ([]ApplicationStatusDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Jobs, true
}

// SetJobs sets field value
func (o *EnvironmentStatusDto) SetJobs(v []ApplicationStatusDto) {
	o.Jobs = v
}

// GetProjectId returns the ProjectId field value
func (o *EnvironmentStatusDto) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatusDto) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *EnvironmentStatusDto) SetProjectId(v string) {
	o.ProjectId = v
}

// GetState returns the State field value
func (o *EnvironmentStatusDto) GetState() ServiceStateDto {
	if o == nil {
		var ret ServiceStateDto
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *EnvironmentStatusDto) GetStateOk() (*ServiceStateDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *EnvironmentStatusDto) SetState(v ServiceStateDto) {
	o.State = v
}

func (o EnvironmentStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applications"] = o.Applications
	toSerialize["containers"] = o.Containers
	toSerialize["databases"] = o.Databases
	toSerialize["helms"] = o.Helms
	toSerialize["id"] = o.Id
	toSerialize["jobs"] = o.Jobs
	toSerialize["project_id"] = o.ProjectId
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *EnvironmentStatusDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applications",
		"containers",
		"databases",
		"helms",
		"id",
		"jobs",
		"project_id",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentStatusDto := _EnvironmentStatusDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnvironmentStatusDto)

	if err != nil {
		return err
	}

	*o = EnvironmentStatusDto(varEnvironmentStatusDto)

	return err
}

type NullableEnvironmentStatusDto struct {
	value *EnvironmentStatusDto
	isSet bool
}

func (v NullableEnvironmentStatusDto) Get() *EnvironmentStatusDto {
	return v.value
}

func (v *NullableEnvironmentStatusDto) Set(val *EnvironmentStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentStatusDto(val *EnvironmentStatusDto) *NullableEnvironmentStatusDto {
	return &NullableEnvironmentStatusDto{value: val, isSet: true}
}

func (v NullableEnvironmentStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


