/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PvcInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PvcInfoDto{}

// PvcInfoDto struct for PvcInfoDto
type PvcInfoDto struct {
	CreatedAt int64 `json:"created_at"`
	DiskMibCapacity int32 `json:"disk_mib_capacity"`
	DiskMibUsage int32 `json:"disk_mib_usage"`
	DiskPercentUsage int32 `json:"disk_percent_usage"`
	Name string `json:"name"`
	Namespace string `json:"namespace"`
	PodName string `json:"pod_name"`
	QoveryServiceInfo NullablePodQoveryServiceInfoDto `json:"qovery_service_info,omitempty"`
	Status NullableString `json:"status,omitempty"`
}

type _PvcInfoDto PvcInfoDto

// NewPvcInfoDto instantiates a new PvcInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPvcInfoDto(createdAt int64, diskMibCapacity int32, diskMibUsage int32, diskPercentUsage int32, name string, namespace string, podName string) *PvcInfoDto {
	this := PvcInfoDto{}
	this.CreatedAt = createdAt
	this.DiskMibCapacity = diskMibCapacity
	this.DiskMibUsage = diskMibUsage
	this.DiskPercentUsage = diskPercentUsage
	this.Name = name
	this.Namespace = namespace
	this.PodName = podName
	return &this
}

// NewPvcInfoDtoWithDefaults instantiates a new PvcInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPvcInfoDtoWithDefaults() *PvcInfoDto {
	this := PvcInfoDto{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *PvcInfoDto) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PvcInfoDto) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PvcInfoDto) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetDiskMibCapacity returns the DiskMibCapacity field value
func (o *PvcInfoDto) GetDiskMibCapacity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskMibCapacity
}

// GetDiskMibCapacityOk returns a tuple with the DiskMibCapacity field value
// and a boolean to check if the value has been set.
func (o *PvcInfoDto) GetDiskMibCapacityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskMibCapacity, true
}

// SetDiskMibCapacity sets field value
func (o *PvcInfoDto) SetDiskMibCapacity(v int32) {
	o.DiskMibCapacity = v
}

// GetDiskMibUsage returns the DiskMibUsage field value
func (o *PvcInfoDto) GetDiskMibUsage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskMibUsage
}

// GetDiskMibUsageOk returns a tuple with the DiskMibUsage field value
// and a boolean to check if the value has been set.
func (o *PvcInfoDto) GetDiskMibUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskMibUsage, true
}

// SetDiskMibUsage sets field value
func (o *PvcInfoDto) SetDiskMibUsage(v int32) {
	o.DiskMibUsage = v
}

// GetDiskPercentUsage returns the DiskPercentUsage field value
func (o *PvcInfoDto) GetDiskPercentUsage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskPercentUsage
}

// GetDiskPercentUsageOk returns a tuple with the DiskPercentUsage field value
// and a boolean to check if the value has been set.
func (o *PvcInfoDto) GetDiskPercentUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskPercentUsage, true
}

// SetDiskPercentUsage sets field value
func (o *PvcInfoDto) SetDiskPercentUsage(v int32) {
	o.DiskPercentUsage = v
}

// GetName returns the Name field value
func (o *PvcInfoDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PvcInfoDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PvcInfoDto) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value
func (o *PvcInfoDto) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *PvcInfoDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *PvcInfoDto) SetNamespace(v string) {
	o.Namespace = v
}

// GetPodName returns the PodName field value
func (o *PvcInfoDto) GetPodName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PodName
}

// GetPodNameOk returns a tuple with the PodName field value
// and a boolean to check if the value has been set.
func (o *PvcInfoDto) GetPodNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PodName, true
}

// SetPodName sets field value
func (o *PvcInfoDto) SetPodName(v string) {
	o.PodName = v
}

// GetQoveryServiceInfo returns the QoveryServiceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PvcInfoDto) GetQoveryServiceInfo() PodQoveryServiceInfoDto {
	if o == nil || IsNil(o.QoveryServiceInfo.Get()) {
		var ret PodQoveryServiceInfoDto
		return ret
	}
	return *o.QoveryServiceInfo.Get()
}

// GetQoveryServiceInfoOk returns a tuple with the QoveryServiceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PvcInfoDto) GetQoveryServiceInfoOk() (*PodQoveryServiceInfoDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.QoveryServiceInfo.Get(), o.QoveryServiceInfo.IsSet()
}

// HasQoveryServiceInfo returns a boolean if a field has been set.
func (o *PvcInfoDto) HasQoveryServiceInfo() bool {
	if o != nil && o.QoveryServiceInfo.IsSet() {
		return true
	}

	return false
}

// SetQoveryServiceInfo gets a reference to the given NullablePodQoveryServiceInfoDto and assigns it to the QoveryServiceInfo field.
func (o *PvcInfoDto) SetQoveryServiceInfo(v PodQoveryServiceInfoDto) {
	o.QoveryServiceInfo.Set(&v)
}
// SetQoveryServiceInfoNil sets the value for QoveryServiceInfo to be an explicit nil
func (o *PvcInfoDto) SetQoveryServiceInfoNil() {
	o.QoveryServiceInfo.Set(nil)
}

// UnsetQoveryServiceInfo ensures that no value is present for QoveryServiceInfo, not even an explicit nil
func (o *PvcInfoDto) UnsetQoveryServiceInfo() {
	o.QoveryServiceInfo.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PvcInfoDto) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PvcInfoDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *PvcInfoDto) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *PvcInfoDto) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *PvcInfoDto) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *PvcInfoDto) UnsetStatus() {
	o.Status.Unset()
}

func (o PvcInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PvcInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["disk_mib_capacity"] = o.DiskMibCapacity
	toSerialize["disk_mib_usage"] = o.DiskMibUsage
	toSerialize["disk_percent_usage"] = o.DiskPercentUsage
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	toSerialize["pod_name"] = o.PodName
	if o.QoveryServiceInfo.IsSet() {
		toSerialize["qovery_service_info"] = o.QoveryServiceInfo.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return toSerialize, nil
}

func (o *PvcInfoDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"disk_mib_capacity",
		"disk_mib_usage",
		"disk_percent_usage",
		"name",
		"namespace",
		"pod_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPvcInfoDto := _PvcInfoDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPvcInfoDto)

	if err != nil {
		return err
	}

	*o = PvcInfoDto(varPvcInfoDto)

	return err
}

type NullablePvcInfoDto struct {
	value *PvcInfoDto
	isSet bool
}

func (v NullablePvcInfoDto) Get() *PvcInfoDto {
	return v.value
}

func (v *NullablePvcInfoDto) Set(val *PvcInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePvcInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePvcInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePvcInfoDto(val *PvcInfoDto) *NullablePvcInfoDto {
	return &NullablePvcInfoDto{value: val, isSet: true}
}

func (v NullablePvcInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePvcInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


