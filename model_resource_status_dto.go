/*
websocket-gateway

Describe the weboscket endpoints

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"fmt"
)

// ResourceStatusDto the model 'ResourceStatusDto'
type ResourceStatusDto string

// List of ResourceStatusDto
const (
	RESOURCESTATUSDTO_OK ResourceStatusDto = "OK"
	RESOURCESTATUSDTO_WARNING ResourceStatusDto = "WARNING"
	RESOURCESTATUSDTO_ALERT ResourceStatusDto = "ALERT"
)

// All allowed values of ResourceStatusDto enum
var AllowedResourceStatusDtoEnumValues = []ResourceStatusDto{
	"OK",
	"WARNING",
	"ALERT",
}

func (v *ResourceStatusDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceStatusDto(value)
	for _, existing := range AllowedResourceStatusDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceStatusDto", value)
}

// NewResourceStatusDtoFromValue returns a pointer to a valid ResourceStatusDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceStatusDtoFromValue(v string) (*ResourceStatusDto, error) {
	ev := ResourceStatusDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceStatusDto: valid values are %v", v, AllowedResourceStatusDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceStatusDto) IsValid() bool {
	for _, existing := range AllowedResourceStatusDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceStatusDto value
func (v ResourceStatusDto) Ptr() *ResourceStatusDto {
	return &v
}

type NullableResourceStatusDto struct {
	value *ResourceStatusDto
	isSet bool
}

func (v NullableResourceStatusDto) Get() *ResourceStatusDto {
	return v.value
}

func (v *NullableResourceStatusDto) Set(val *ResourceStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceStatusDto(val *ResourceStatusDto) *NullableResourceStatusDto {
	return &NullableResourceStatusDto{value: val, isSet: true}
}

func (v NullableResourceStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

