/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"fmt"
)

// DebugFlavor the model 'DebugFlavor'
type DebugFlavor string

// List of DebugFlavor
const (
	DEBUGFLAVOR_REGULAR_PRIVILEGE DebugFlavor = "REGULAR_PRIVILEGE"
	DEBUGFLAVOR_FULL_PRIVILEGE DebugFlavor = "FULL_PRIVILEGE"
)

// All allowed values of DebugFlavor enum
var AllowedDebugFlavorEnumValues = []DebugFlavor{
	"REGULAR_PRIVILEGE",
	"FULL_PRIVILEGE",
}

func (v *DebugFlavor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DebugFlavor(value)
	for _, existing := range AllowedDebugFlavorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DebugFlavor", value)
}

// NewDebugFlavorFromValue returns a pointer to a valid DebugFlavor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDebugFlavorFromValue(v string) (*DebugFlavor, error) {
	ev := DebugFlavor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DebugFlavor: valid values are %v", v, AllowedDebugFlavorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DebugFlavor) IsValid() bool {
	for _, existing := range AllowedDebugFlavorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DebugFlavor value
func (v DebugFlavor) Ptr() *DebugFlavor {
	return &v
}

type NullableDebugFlavor struct {
	value *DebugFlavor
	isSet bool
}

func (v NullableDebugFlavor) Get() *DebugFlavor {
	return v.value
}

func (v *NullableDebugFlavor) Set(val *DebugFlavor) {
	v.value = val
	v.isSet = true
}

func (v NullableDebugFlavor) IsSet() bool {
	return v.isSet
}

func (v *NullableDebugFlavor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDebugFlavor(val *DebugFlavor) *NullableDebugFlavor {
	return &NullableDebugFlavor{value: val, isSet: true}
}

func (v NullableDebugFlavor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDebugFlavor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

