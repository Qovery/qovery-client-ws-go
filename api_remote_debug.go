/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RemoteDebugAPIService RemoteDebugAPI service
type RemoteDebugAPIService service

type ApiHandleShellRemoteDebugRequest struct {
	ctx context.Context
	ApiService *RemoteDebugAPIService
	organization string
	cluster string
	flavor DebugFlavor
	ttyWidth int32
	ttyHeight int32
	nodeSelector string
}

func (r ApiHandleShellRemoteDebugRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.HandleShellRemoteDebugExecute(r)
}

/*
HandleShellRemoteDebug Method for HandleShellRemoteDebug

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organization
 @param cluster
 @param flavor
 @param ttyWidth
 @param ttyHeight
 @param nodeSelector
 @return ApiHandleShellRemoteDebugRequest
*/
func (a *RemoteDebugAPIService) HandleShellRemoteDebug(ctx context.Context, organization string, cluster string, flavor DebugFlavor, ttyWidth int32, ttyHeight int32, nodeSelector string) ApiHandleShellRemoteDebugRequest {
	return ApiHandleShellRemoteDebugRequest{
		ApiService: a,
		ctx: ctx,
		organization: organization,
		cluster: cluster,
		flavor: flavor,
		ttyWidth: ttyWidth,
		ttyHeight: ttyHeight,
		nodeSelector: nodeSelector,
	}
}

// Execute executes the request
//  @return string
func (a *RemoteDebugAPIService) HandleShellRemoteDebugExecute(r ApiHandleShellRemoteDebugRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteDebugAPIService.HandleShellRemoteDebug")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shell/debug"
	localVarPath = strings.Replace(localVarPath, "{"+"organization"+"}", url.PathEscape(parameterValueToString(r.organization, "organization")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cluster"+"}", url.PathEscape(parameterValueToString(r.cluster, "cluster")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flavor"+"}", url.PathEscape(parameterValueToString(r.flavor, "flavor")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tty_width"+"}", url.PathEscape(parameterValueToString(r.ttyWidth, "ttyWidth")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tty_height"+"}", url.PathEscape(parameterValueToString(r.ttyHeight, "ttyHeight")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"node_selector"+"}", url.PathEscape(parameterValueToString(r.nodeSelector, "nodeSelector")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ttyWidth < 0 {
		return localVarReturnValue, nil, reportError("ttyWidth must be greater than 0")
	}
	if r.ttyHeight < 0 {
		return localVarReturnValue, nil, reportError("ttyHeight must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
