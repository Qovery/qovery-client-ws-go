/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"fmt"
)

// QoveryComponentStatus the model 'QoveryComponentStatus'
type QoveryComponentStatus string

// List of QoveryComponentStatus
const (
	QOVERYCOMPONENTSTATUS_RUNNING QoveryComponentStatus = "RUNNING"
	QOVERYCOMPONENTSTATUS_ERROR QoveryComponentStatus = "ERROR"
)

// All allowed values of QoveryComponentStatus enum
var AllowedQoveryComponentStatusEnumValues = []QoveryComponentStatus{
	"RUNNING",
	"ERROR",
}

func (v *QoveryComponentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QoveryComponentStatus(value)
	for _, existing := range AllowedQoveryComponentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QoveryComponentStatus", value)
}

// NewQoveryComponentStatusFromValue returns a pointer to a valid QoveryComponentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQoveryComponentStatusFromValue(v string) (*QoveryComponentStatus, error) {
	ev := QoveryComponentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QoveryComponentStatus: valid values are %v", v, AllowedQoveryComponentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QoveryComponentStatus) IsValid() bool {
	for _, existing := range AllowedQoveryComponentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QoveryComponentStatus value
func (v QoveryComponentStatus) Ptr() *QoveryComponentStatus {
	return &v
}

type NullableQoveryComponentStatus struct {
	value *QoveryComponentStatus
	isSet bool
}

func (v NullableQoveryComponentStatus) Get() *QoveryComponentStatus {
	return v.value
}

func (v *NullableQoveryComponentStatus) Set(val *QoveryComponentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableQoveryComponentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableQoveryComponentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQoveryComponentStatus(val *QoveryComponentStatus) *NullableQoveryComponentStatus {
	return &NullableQoveryComponentStatus{value: val, isSet: true}
}

func (v NullableQoveryComponentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQoveryComponentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

