/*
websocket-gateway

Describe the weboscket endpoints

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QoveryComponentInFailureOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QoveryComponentInFailureOneOf{}

// QoveryComponentInFailureOneOf struct for QoveryComponentInFailureOneOf
type QoveryComponentInFailureOneOf struct {
	ComponentName string `json:"component_name"`
	ContainerName string `json:"container_name"`
	Level QoveryComponentContainerStatusLevel `json:"level"`
	Message NullableString `json:"message,omitempty"`
	PodName string `json:"pod_name"`
	Reason NullableString `json:"reason,omitempty"`
	Type string `json:"type"`
}

type _QoveryComponentInFailureOneOf QoveryComponentInFailureOneOf

// NewQoveryComponentInFailureOneOf instantiates a new QoveryComponentInFailureOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQoveryComponentInFailureOneOf(componentName string, containerName string, level QoveryComponentContainerStatusLevel, podName string, type_ string) *QoveryComponentInFailureOneOf {
	this := QoveryComponentInFailureOneOf{}
	this.ComponentName = componentName
	this.ContainerName = containerName
	this.Level = level
	this.PodName = podName
	this.Type = type_
	return &this
}

// NewQoveryComponentInFailureOneOfWithDefaults instantiates a new QoveryComponentInFailureOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQoveryComponentInFailureOneOfWithDefaults() *QoveryComponentInFailureOneOf {
	this := QoveryComponentInFailureOneOf{}
	return &this
}

// GetComponentName returns the ComponentName field value
func (o *QoveryComponentInFailureOneOf) GetComponentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value
// and a boolean to check if the value has been set.
func (o *QoveryComponentInFailureOneOf) GetComponentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentName, true
}

// SetComponentName sets field value
func (o *QoveryComponentInFailureOneOf) SetComponentName(v string) {
	o.ComponentName = v
}

// GetContainerName returns the ContainerName field value
func (o *QoveryComponentInFailureOneOf) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *QoveryComponentInFailureOneOf) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerName, true
}

// SetContainerName sets field value
func (o *QoveryComponentInFailureOneOf) SetContainerName(v string) {
	o.ContainerName = v
}

// GetLevel returns the Level field value
func (o *QoveryComponentInFailureOneOf) GetLevel() QoveryComponentContainerStatusLevel {
	if o == nil {
		var ret QoveryComponentContainerStatusLevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *QoveryComponentInFailureOneOf) GetLevelOk() (*QoveryComponentContainerStatusLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *QoveryComponentInFailureOneOf) SetLevel(v QoveryComponentContainerStatusLevel) {
	o.Level = v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoveryComponentInFailureOneOf) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoveryComponentInFailureOneOf) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *QoveryComponentInFailureOneOf) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *QoveryComponentInFailureOneOf) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *QoveryComponentInFailureOneOf) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *QoveryComponentInFailureOneOf) UnsetMessage() {
	o.Message.Unset()
}

// GetPodName returns the PodName field value
func (o *QoveryComponentInFailureOneOf) GetPodName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PodName
}

// GetPodNameOk returns a tuple with the PodName field value
// and a boolean to check if the value has been set.
func (o *QoveryComponentInFailureOneOf) GetPodNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PodName, true
}

// SetPodName sets field value
func (o *QoveryComponentInFailureOneOf) SetPodName(v string) {
	o.PodName = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoveryComponentInFailureOneOf) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoveryComponentInFailureOneOf) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *QoveryComponentInFailureOneOf) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *QoveryComponentInFailureOneOf) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *QoveryComponentInFailureOneOf) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *QoveryComponentInFailureOneOf) UnsetReason() {
	o.Reason.Unset()
}

// GetType returns the Type field value
func (o *QoveryComponentInFailureOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *QoveryComponentInFailureOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *QoveryComponentInFailureOneOf) SetType(v string) {
	o.Type = v
}

func (o QoveryComponentInFailureOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QoveryComponentInFailureOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["component_name"] = o.ComponentName
	toSerialize["container_name"] = o.ContainerName
	toSerialize["level"] = o.Level
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	toSerialize["pod_name"] = o.PodName
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *QoveryComponentInFailureOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"component_name",
		"container_name",
		"level",
		"pod_name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQoveryComponentInFailureOneOf := _QoveryComponentInFailureOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQoveryComponentInFailureOneOf)

	if err != nil {
		return err
	}

	*o = QoveryComponentInFailureOneOf(varQoveryComponentInFailureOneOf)

	return err
}

type NullableQoveryComponentInFailureOneOf struct {
	value *QoveryComponentInFailureOneOf
	isSet bool
}

func (v NullableQoveryComponentInFailureOneOf) Get() *QoveryComponentInFailureOneOf {
	return v.value
}

func (v *NullableQoveryComponentInFailureOneOf) Set(val *QoveryComponentInFailureOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableQoveryComponentInFailureOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableQoveryComponentInFailureOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQoveryComponentInFailureOneOf(val *QoveryComponentInFailureOneOf) *NullableQoveryComponentInFailureOneOf {
	return &NullableQoveryComponentInFailureOneOf{value: val, isSet: true}
}

func (v NullableQoveryComponentInFailureOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQoveryComponentInFailureOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


