/*
websocket-gateway

Describe the weboscket endpoints

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"fmt"
)

// ClusterStatusDtoComputedStatusKubeVersionStatus - struct for ClusterStatusDtoComputedStatusKubeVersionStatus
type ClusterStatusDtoComputedStatusKubeVersionStatus struct {
	QoveryDriftKubeVersion *QoveryDriftKubeVersion
	QoveryOkKubeVersion *QoveryOkKubeVersion
}

// QoveryDriftKubeVersionAsClusterStatusDtoComputedStatusKubeVersionStatus is a convenience function that returns QoveryDriftKubeVersion wrapped in ClusterStatusDtoComputedStatusKubeVersionStatus
func QoveryDriftKubeVersionAsClusterStatusDtoComputedStatusKubeVersionStatus(v *QoveryDriftKubeVersion) ClusterStatusDtoComputedStatusKubeVersionStatus {
	return ClusterStatusDtoComputedStatusKubeVersionStatus{
		QoveryDriftKubeVersion: v,
	}
}

// QoveryOkKubeVersionAsClusterStatusDtoComputedStatusKubeVersionStatus is a convenience function that returns QoveryOkKubeVersion wrapped in ClusterStatusDtoComputedStatusKubeVersionStatus
func QoveryOkKubeVersionAsClusterStatusDtoComputedStatusKubeVersionStatus(v *QoveryOkKubeVersion) ClusterStatusDtoComputedStatusKubeVersionStatus {
	return ClusterStatusDtoComputedStatusKubeVersionStatus{
		QoveryOkKubeVersion: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ClusterStatusDtoComputedStatusKubeVersionStatus) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into QoveryDriftKubeVersion
	err = newStrictDecoder(data).Decode(&dst.QoveryDriftKubeVersion)
	if err == nil {
		jsonQoveryDriftKubeVersion, _ := json.Marshal(dst.QoveryDriftKubeVersion)
		if string(jsonQoveryDriftKubeVersion) == "{}" { // empty struct
			dst.QoveryDriftKubeVersion = nil
		} else {
			match++
		}
	} else {
		dst.QoveryDriftKubeVersion = nil
	}

	// try to unmarshal data into QoveryOkKubeVersion
	err = newStrictDecoder(data).Decode(&dst.QoveryOkKubeVersion)
	if err == nil {
		jsonQoveryOkKubeVersion, _ := json.Marshal(dst.QoveryOkKubeVersion)
		if string(jsonQoveryOkKubeVersion) == "{}" { // empty struct
			dst.QoveryOkKubeVersion = nil
		} else {
			match++
		}
	} else {
		dst.QoveryOkKubeVersion = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QoveryDriftKubeVersion = nil
		dst.QoveryOkKubeVersion = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ClusterStatusDtoComputedStatusKubeVersionStatus)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ClusterStatusDtoComputedStatusKubeVersionStatus)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ClusterStatusDtoComputedStatusKubeVersionStatus) MarshalJSON() ([]byte, error) {
	if src.QoveryDriftKubeVersion != nil {
		return json.Marshal(&src.QoveryDriftKubeVersion)
	}

	if src.QoveryOkKubeVersion != nil {
		return json.Marshal(&src.QoveryOkKubeVersion)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ClusterStatusDtoComputedStatusKubeVersionStatus) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QoveryDriftKubeVersion != nil {
		return obj.QoveryDriftKubeVersion
	}

	if obj.QoveryOkKubeVersion != nil {
		return obj.QoveryOkKubeVersion
	}

	// all schemas are nil
	return nil
}

type NullableClusterStatusDtoComputedStatusKubeVersionStatus struct {
	value *ClusterStatusDtoComputedStatusKubeVersionStatus
	isSet bool
}

func (v NullableClusterStatusDtoComputedStatusKubeVersionStatus) Get() *ClusterStatusDtoComputedStatusKubeVersionStatus {
	return v.value
}

func (v *NullableClusterStatusDtoComputedStatusKubeVersionStatus) Set(val *ClusterStatusDtoComputedStatusKubeVersionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStatusDtoComputedStatusKubeVersionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStatusDtoComputedStatusKubeVersionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStatusDtoComputedStatusKubeVersionStatus(val *ClusterStatusDtoComputedStatusKubeVersionStatus) *NullableClusterStatusDtoComputedStatusKubeVersionStatus {
	return &NullableClusterStatusDtoComputedStatusKubeVersionStatus{value: val, isSet: true}
}

func (v NullableClusterStatusDtoComputedStatusKubeVersionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStatusDtoComputedStatusKubeVersionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


