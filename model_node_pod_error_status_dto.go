/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodePodErrorStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodePodErrorStatusDto{}

// NodePodErrorStatusDto struct for NodePodErrorStatusDto
type NodePodErrorStatusDto struct {
	ContainerName string `json:"container_name"`
	Message NullableString `json:"message,omitempty"`
	Reason NullableString `json:"reason,omitempty"`
}

type _NodePodErrorStatusDto NodePodErrorStatusDto

// NewNodePodErrorStatusDto instantiates a new NodePodErrorStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePodErrorStatusDto(containerName string) *NodePodErrorStatusDto {
	this := NodePodErrorStatusDto{}
	this.ContainerName = containerName
	return &this
}

// NewNodePodErrorStatusDtoWithDefaults instantiates a new NodePodErrorStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePodErrorStatusDtoWithDefaults() *NodePodErrorStatusDto {
	this := NodePodErrorStatusDto{}
	return &this
}

// GetContainerName returns the ContainerName field value
func (o *NodePodErrorStatusDto) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *NodePodErrorStatusDto) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerName, true
}

// SetContainerName sets field value
func (o *NodePodErrorStatusDto) SetContainerName(v string) {
	o.ContainerName = v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodePodErrorStatusDto) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePodErrorStatusDto) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *NodePodErrorStatusDto) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *NodePodErrorStatusDto) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *NodePodErrorStatusDto) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *NodePodErrorStatusDto) UnsetMessage() {
	o.Message.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodePodErrorStatusDto) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePodErrorStatusDto) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *NodePodErrorStatusDto) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *NodePodErrorStatusDto) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *NodePodErrorStatusDto) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *NodePodErrorStatusDto) UnsetReason() {
	o.Reason.Unset()
}

func (o NodePodErrorStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodePodErrorStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["container_name"] = o.ContainerName
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	return toSerialize, nil
}

func (o *NodePodErrorStatusDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"container_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodePodErrorStatusDto := _NodePodErrorStatusDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodePodErrorStatusDto)

	if err != nil {
		return err
	}

	*o = NodePodErrorStatusDto(varNodePodErrorStatusDto)

	return err
}

type NullableNodePodErrorStatusDto struct {
	value *NodePodErrorStatusDto
	isSet bool
}

func (v NullableNodePodErrorStatusDto) Get() *NodePodErrorStatusDto {
	return v.value
}

func (v *NullableNodePodErrorStatusDto) Set(val *NodePodErrorStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePodErrorStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePodErrorStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePodErrorStatusDto(val *NodePodErrorStatusDto) *NullableNodePodErrorStatusDto {
	return &NullableNodePodErrorStatusDto{value: val, isSet: true}
}

func (v NullableNodePodErrorStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePodErrorStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


