/*
websocket-gateway

Describe the websocket endpoints of Qovery

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery-ws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PodQoveryServiceInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PodQoveryServiceInfoDto{}

// PodQoveryServiceInfoDto struct for PodQoveryServiceInfoDto
type PodQoveryServiceInfoDto struct {
	EnvironmentId string `json:"environment_id"`
	EnvironmentName string `json:"environment_name"`
	ProjectId string `json:"project_id"`
	ProjectName string `json:"project_name"`
	ServiceId string `json:"service_id"`
	ServiceName string `json:"service_name"`
}

type _PodQoveryServiceInfoDto PodQoveryServiceInfoDto

// NewPodQoveryServiceInfoDto instantiates a new PodQoveryServiceInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPodQoveryServiceInfoDto(environmentId string, environmentName string, projectId string, projectName string, serviceId string, serviceName string) *PodQoveryServiceInfoDto {
	this := PodQoveryServiceInfoDto{}
	this.EnvironmentId = environmentId
	this.EnvironmentName = environmentName
	this.ProjectId = projectId
	this.ProjectName = projectName
	this.ServiceId = serviceId
	this.ServiceName = serviceName
	return &this
}

// NewPodQoveryServiceInfoDtoWithDefaults instantiates a new PodQoveryServiceInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodQoveryServiceInfoDtoWithDefaults() *PodQoveryServiceInfoDto {
	this := PodQoveryServiceInfoDto{}
	return &this
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *PodQoveryServiceInfoDto) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *PodQoveryServiceInfoDto) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *PodQoveryServiceInfoDto) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetEnvironmentName returns the EnvironmentName field value
func (o *PodQoveryServiceInfoDto) GetEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value
// and a boolean to check if the value has been set.
func (o *PodQoveryServiceInfoDto) GetEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentName, true
}

// SetEnvironmentName sets field value
func (o *PodQoveryServiceInfoDto) SetEnvironmentName(v string) {
	o.EnvironmentName = v
}

// GetProjectId returns the ProjectId field value
func (o *PodQoveryServiceInfoDto) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *PodQoveryServiceInfoDto) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *PodQoveryServiceInfoDto) SetProjectId(v string) {
	o.ProjectId = v
}

// GetProjectName returns the ProjectName field value
func (o *PodQoveryServiceInfoDto) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *PodQoveryServiceInfoDto) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *PodQoveryServiceInfoDto) SetProjectName(v string) {
	o.ProjectName = v
}

// GetServiceId returns the ServiceId field value
func (o *PodQoveryServiceInfoDto) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *PodQoveryServiceInfoDto) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *PodQoveryServiceInfoDto) SetServiceId(v string) {
	o.ServiceId = v
}

// GetServiceName returns the ServiceName field value
func (o *PodQoveryServiceInfoDto) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *PodQoveryServiceInfoDto) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *PodQoveryServiceInfoDto) SetServiceName(v string) {
	o.ServiceName = v
}

func (o PodQoveryServiceInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodQoveryServiceInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment_id"] = o.EnvironmentId
	toSerialize["environment_name"] = o.EnvironmentName
	toSerialize["project_id"] = o.ProjectId
	toSerialize["project_name"] = o.ProjectName
	toSerialize["service_id"] = o.ServiceId
	toSerialize["service_name"] = o.ServiceName
	return toSerialize, nil
}

func (o *PodQoveryServiceInfoDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment_id",
		"environment_name",
		"project_id",
		"project_name",
		"service_id",
		"service_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPodQoveryServiceInfoDto := _PodQoveryServiceInfoDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPodQoveryServiceInfoDto)

	if err != nil {
		return err
	}

	*o = PodQoveryServiceInfoDto(varPodQoveryServiceInfoDto)

	return err
}

type NullablePodQoveryServiceInfoDto struct {
	value *PodQoveryServiceInfoDto
	isSet bool
}

func (v NullablePodQoveryServiceInfoDto) Get() *PodQoveryServiceInfoDto {
	return v.value
}

func (v *NullablePodQoveryServiceInfoDto) Set(val *PodQoveryServiceInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePodQoveryServiceInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePodQoveryServiceInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodQoveryServiceInfoDto(val *PodQoveryServiceInfoDto) *NullablePodQoveryServiceInfoDto {
	return &NullablePodQoveryServiceInfoDto{value: val, isSet: true}
}

func (v NullablePodQoveryServiceInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodQoveryServiceInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


