/*
websocket-gateway

Describe the weboscket endpoints

API version: 0.1.0
Contact: erebe@erebe.eu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qovery

import (
	"encoding/json"
	"fmt"
)

// UnitDto the model 'UnitDto'
type UnitDto string

// List of UnitDto
const (
	UNITDTO_M_CPU UnitDto = "mCPU"
	UNITDTO_MI_B UnitDto = "MiB"
)

// All allowed values of UnitDto enum
var AllowedUnitDtoEnumValues = []UnitDto{
	"mCPU",
	"MiB",
}

func (v *UnitDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UnitDto(value)
	for _, existing := range AllowedUnitDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UnitDto", value)
}

// NewUnitDtoFromValue returns a pointer to a valid UnitDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUnitDtoFromValue(v string) (*UnitDto, error) {
	ev := UnitDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UnitDto: valid values are %v", v, AllowedUnitDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UnitDto) IsValid() bool {
	for _, existing := range AllowedUnitDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UnitDto value
func (v UnitDto) Ptr() *UnitDto {
	return &v
}

type NullableUnitDto struct {
	value *UnitDto
	isSet bool
}

func (v NullableUnitDto) Get() *UnitDto {
	return v.value
}

func (v *NullableUnitDto) Set(val *UnitDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitDto(val *UnitDto) *NullableUnitDto {
	return &NullableUnitDto{value: val, isSet: true}
}

func (v NullableUnitDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

